# 파일명: 생성자1.py

# 생성자 (constructor)
# - 클래스가 객체(새로운 변수를 만들때)
#   원하는 값으로 초기화를 한다. 


# 내가 만든 변수를 생성할 때 기본값을 설정하는 것이 
# 아니라 내가 원하는 값으로 한번에 초기화,진행까지
# 해서 변수를 만든다. 

# 객체 생성 후 초기화 진행까지 한번에 하기!

# 생성자
# 새로운 변수생성 할 때 클래스이름() 
# () 괄호들은 대부분 프로그래밍언어에서 함수라는 의미.

# 생성자 초기화 함수
# 

class A:

    def __init__(self,n):     # 언더바 두번!
        self.num = n
        # 저장하는 명령문
        # if문 while 문 
        # print() 모두 사용 가능.
        
        # 함수 안에서 다른 함수를 부른다. (호출)
        self.info()
    def info(self):
        print(self.num)

one = A(10)
two = A(20)
three = A(30)

# 파이썬
# init 함수가 자동으로 (생성자가 호출되면)
# 새로 만든 변수의 주소값이 self 자리로 들어간다.
# self 주소를 받는 변수이름일 뿐 다른 이름으로 변경 가능.

# 인스턴스
# 벤츠자동차는 이서희꺼다
# 벤츠자동차는 이지희꺼다
# 벤츠자동차는 이정희꺼다

# 객체
# 벤츠 자동차

# 인스턴스 변수
# 객체가 생성되고 (새로운변수가 생성되고) 각각 ! 변수가 만들어지는 것을
# 인스턴스변수라고 한다.

# 인스턴스 매서드(함수)
# 객체가 생성되고 (새로운변수가 생성되고) 각각 ! 함수가 만들어지는 것을
# 인스턴스 메서드라고 한다.

# 프로그램이 끝날때까지 데이터를 유지시키고, 
# 프로그램이 끝날 때까지 함수(기능을) 실행시키는 것!

# 클래스 정적 변수 (static)  ('공유'의 느낌)
# 
# 클래스 정적 메서드


class Movie:

    title = ''
    time = ''
    s_time = ''
    where = ''
    num = ''

    def __init__(who, title, time, s_time, where, num):
        who.where = where
        who.title = title
        who.time = time
        who.s_time = s_time
        who.num = num

        print(who.title)

    def show(who):
        print(who.title)

# 함수를 실행(호출)
# 내가 직접 함수이름을 호출(부른다)
# 몇번이든 계속 호출할 수 있다. 
# 수동

# 서희 = Movie()
# 서희.init(서희, '범죄도시3', 105, 24, '3관', 2)
# 서희.init(서희, '범죄도시3', 105, 24, '3관', 2)
# 서희.init(서희, '범죄도시3', 105, 24, '3관', 2)
# 서희.init(서희, '범죄도시3', 105, 24, '3관', 2)

# 자동
서희 = Movie('범죄도시3', 105, 24, '3관', 2)
print(서희)
# 생성자의 실행 순서.
# 1. 클래스명()
# 2. 메모리공간을 만든다. (할당)
# 3. init() 함수를 자동으로 부른다. (호출)
# 4. 함수의 매개변수를 가져와서 앞에 있는 who에 저장한다.
# 5. 서희라는 변수에 새로 만든 클래스의 주소값이 저장된다.

